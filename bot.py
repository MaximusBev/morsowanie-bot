import logging, json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler(timezone='Europe/Warsaw')
CHAT_ID = None
BIRTHDAYS_FILE = 'birthdays.json'

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞—Ç –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def load_birthdays():
    try:
        with open(BIRTHDAYS_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞—Ç –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def save_birthdays(data):
    with open(BIRTHDAYS_FILE, 'w') as f:
        json.dump(data, f)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç, Mors! üåä –í—ñ—Ç–∞—é —É –≥—Ä—É–ø—ñ –ú–æ—Ä–∂—ñ–≤!")

# –í—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = f"Mors {member.first_name}"
        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ñ—Ç, {name}! üåä –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ –ú–æ—Ä–∂—ñ–≤! –ì–æ—Ç—É–π—Å—è –∑–∞–≥–∞—Ä—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è!"
        )

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    birthdays = load_birthdays()

    try:
        date_str = context.args[0]  # —Ñ–æ—Ä–º–∞—Ç—É DD.MM
        datetime.strptime(date_str, "%d.%m")
        birthdays[str(user.id)] = {
            "name": user.first_name,
            "birthday": date_str
        }
        save_birthdays(birthdays)
        await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")
    except:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /birthday DD.MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /birthday 25.12)")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
async def birthday_greetings():
    global CHAT_ID, app
    birthdays = load_birthdays()
    today = datetime.now(pytz.timezone('Europe/Warsaw')).strftime("%d.%m")

    for user_id, data in birthdays.items():
        if data["birthday"] == today:
            await app.bot.send_message(
                chat_id=CHAT_ID,
                text=f"üéâüéà –í—ñ—Ç–∞—î–º–æ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, Mors {data['name']}! –ë–∞–∂–∞—î–º–æ –º—ñ—Ü–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —Å–≤—ñ–∂–∏—Ö –∑–∞–Ω—É—Ä–µ–Ω—å! üåä‚ùÑÔ∏è"
            )

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
async def setup_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    scheduler.remove_all_jobs()

    # –©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–ø'—è—Ç–Ω–∏—Ü—è, 16:00)
    scheduler.add_job(weekly_poll, trigger='cron', day_of_week='fri', hour=16, minute=0)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ –æ 9:00
    scheduler.add_job(birthday_greetings, trigger='cron', hour=9, minute=0)

    await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ (–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è + –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è)!")

# –©–æ—Ç–∏–∂–Ω–µ–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async def weekly_poll():
    global CHAT_ID, app
    await app.bot.send_poll(
        chat_id=CHAT_ID,
        question="–•—Ç–æ –∑–∞–≤—Ç—Ä–∞ –≥–æ—Ç–æ–≤–∏–π –ø–æ–º–æ—Ä–æ–∑–∏—Ç–∏ —Å–≤–æ—ó —Ö–≤–æ—Å—Ç–∏–∫–∏? üåä‚ùÑÔ∏è",
        options=["–Ø –≥–æ—Ç–æ–≤–∏–π!", "–ü–æ–∫–∏ –ø—Ä–æ–ø—É—â—É."],
        is_anonymous=False,
    )

def main():
    global app
    TOKEN = "8152763219:AAHPHyTJjho-zUnimJ1iJXPiOnQWLQf9Sew"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    app.add_handler(CommandHandler("setup", setup_jobs))
    app.add_handler(CommandHandler("birthday", set_birthday))

    scheduler.start()
    app.run_polling()

if __name__ == '__main__':
    main()
